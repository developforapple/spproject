//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `Info-SPOld.plist`.
    static let infoSPOldPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info-SPOld", pathExtension: "plist")
    /// Resource file `LCActionSheet.bundle`.
    static let lcActionSheetBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "LCActionSheet", pathExtension: "bundle")
    /// Resource file `LICENSE`.
    static let licensE = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "")
    /// Resource file `heroMap.json`.
    static let heroMapJson = Rswift.FileResource(bundle: R.hostingBundle, name: "heroMap", pathExtension: "json")
    /// Resource file `tac_services_configurations.plist`.
    static let tac_services_configurationsPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "tac_services_configurations", pathExtension: "plist")
    /// Resource file `workshoptags.json`.
    static let workshoptagsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "workshoptags", pathExtension: "json")
    
    /// `bundle.url(forResource: "Info-SPOld", withExtension: "plist")`
    static func infoSPOldPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoSPOldPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "LCActionSheet", withExtension: "bundle")`
    static func lcActionSheetBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lcActionSheetBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "LICENSE", withExtension: "")`
    static func licensE(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licensE
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "heroMap", withExtension: "json")`
    static func heroMapJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.heroMapJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "tac_services_configurations", withExtension: "plist")`
    static func tac_services_configurationsPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tac_services_configurationsPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "workshoptags", withExtension: "json")`
    static func workshoptagsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workshoptagsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 60 images.
  struct image {
    /// Image `QRCode`.
    static let qrCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "QRCode")
    /// Image `TI2`.
    static let ti2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TI2")
    /// Image `TI3`.
    static let ti3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TI3")
    /// Image `TI4`.
    static let ti4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TI4")
    /// Image `TI5`.
    static let ti5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TI5")
    /// Image `TI6`.
    static let ti6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TI6")
    /// Image `TI7`.
    static let ti7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TI7")
    /// Image `Unit_Audio`.
    static let unit_Audio = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unit_Audio")
    /// Image `Unit_Courier`.
    static let unit_Courier = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unit_Courier")
    /// Image `Unit_Dota2`.
    static let unit_Dota2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unit_Dota2")
    /// Image `Unit_Hero`.
    static let unit_Hero = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unit_Hero")
    /// Image `Unit_Hud`.
    static let unit_Hud = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unit_Hud")
    /// Image `Unit_OffPrice`.
    static let unit_OffPrice = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unit_OffPrice")
    /// Image `Unit_Other`.
    static let unit_Other = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unit_Other")
    /// Image `Unit_Steam`.
    static let unit_Steam = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unit_Steam")
    /// Image `Unit_Treasure`.
    static let unit_Treasure = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unit_Treasure")
    /// Image `Unit_World`.
    static let unit_World = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unit_World")
    /// Image `about_left`.
    static let about_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_left")
    /// Image `about_right`.
    static let about_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_right")
    /// Image `dac_2015`.
    static let dac_2015 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dac_2015")
    /// Image `fall_2016`.
    static let fall_2016 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fall_2016")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `frankfut_major_2015`.
    static let frankfut_major_2015 = Rswift.ImageResource(bundle: R.hostingBundle, name: "frankfut_major_2015")
    /// Image `frostivus_2017`.
    static let frostivus_2017 = Rswift.ImageResource(bundle: R.hostingBundle, name: "frostivus_2017")
    /// Image `icon_arrow_bottom`.
    static let icon_arrow_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_bottom")
    /// Image `icon_arrow_more`.
    static let icon_arrow_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_more")
    /// Image `icon_back_dark`.
    static let icon_back_dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back_dark")
    /// Image `icon_back_light_2`.
    static let icon_back_light_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back_light_2")
    /// Image `icon_close`.
    static let icon_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close")
    /// Image `icon_four_rectangle`.
    static let icon_four_rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_four_rectangle")
    /// Image `icon_navi_cancel`.
    static let icon_navi_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navi_cancel")
    /// Image `icon_navi_info`.
    static let icon_navi_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navi_info")
    /// Image `icon_navi_search`.
    static let icon_navi_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navi_search")
    /// Image `icon_play`.
    static let icon_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_play")
    /// Image `icon_tab_home`.
    static let icon_tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_home")
    /// Image `icon_tab_me`.
    static let icon_tab_me = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_me")
    /// Image `icon_tab_search`.
    static let icon_tab_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_search")
    /// Image `icon_tab_user`.
    static let icon_tab_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_user")
    /// Image `icon_tab_workshop`.
    static let icon_tab_workshop = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_workshop")
    /// Image `icon_three_rectangle`.
    static let icon_three_rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_three_rectangle")
    /// Image `icon_title_collect_grey`.
    static let icon_title_collect_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_title_collect_grey")
    /// Image `icon_title_collect`.
    static let icon_title_collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_title_collect")
    /// Image `icon_title_collected_grey`.
    static let icon_title_collected_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_title_collected_grey")
    /// Image `icon_title_more`.
    static let icon_title_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_title_more")
    /// Image `icon_title_sort`.
    static let icon_title_sort = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_title_sort")
    /// Image `icon_video_play`.
    static let icon_video_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_video_play")
    /// Image `logo-2`.
    static let logo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-2")
    /// Image `logo_dota2`.
    static let logo_dota2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_dota2")
    /// Image `logo_steam_btn`.
    static let logo_steam_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_steam_btn")
    /// Image `logo_steam_light`.
    static let logo_steam_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_steam_light")
    /// Image `logo_steam`.
    static let logo_steam = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_steam")
    /// Image `logo_taobao`.
    static let logo_taobao = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_taobao")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `new_bloom_2017`.
    static let new_bloom_2017 = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_bloom_2017")
    /// Image `nexon_pc_bang`.
    static let nexon_pc_bang = Rswift.ImageResource(bundle: R.hostingBundle, name: "nexon_pc_bang")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `sort`.
    static let sort = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort")
    /// Image `sp_icon`.
    static let sp_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sp_icon")
    /// Image `winter_2016`.
    static let winter_2016 = Rswift.ImageResource(bundle: R.hostingBundle, name: "winter_2016")
    /// Image `winter_2017`.
    static let winter_2017 = Rswift.ImageResource(bundle: R.hostingBundle, name: "winter_2017")
    
    /// `UIImage(named: "QRCode", bundle: ..., traitCollection: ...)`
    static func qrCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrCode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TI2", bundle: ..., traitCollection: ...)`
    static func ti2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ti2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TI3", bundle: ..., traitCollection: ...)`
    static func ti3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ti3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TI4", bundle: ..., traitCollection: ...)`
    static func ti4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ti4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TI5", bundle: ..., traitCollection: ...)`
    static func ti5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ti5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TI6", bundle: ..., traitCollection: ...)`
    static func ti6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ti6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TI7", bundle: ..., traitCollection: ...)`
    static func ti7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ti7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unit_Audio", bundle: ..., traitCollection: ...)`
    static func unit_Audio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unit_Audio, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unit_Courier", bundle: ..., traitCollection: ...)`
    static func unit_Courier(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unit_Courier, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unit_Dota2", bundle: ..., traitCollection: ...)`
    static func unit_Dota2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unit_Dota2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unit_Hero", bundle: ..., traitCollection: ...)`
    static func unit_Hero(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unit_Hero, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unit_Hud", bundle: ..., traitCollection: ...)`
    static func unit_Hud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unit_Hud, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unit_OffPrice", bundle: ..., traitCollection: ...)`
    static func unit_OffPrice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unit_OffPrice, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unit_Other", bundle: ..., traitCollection: ...)`
    static func unit_Other(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unit_Other, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unit_Steam", bundle: ..., traitCollection: ...)`
    static func unit_Steam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unit_Steam, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unit_Treasure", bundle: ..., traitCollection: ...)`
    static func unit_Treasure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unit_Treasure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unit_World", bundle: ..., traitCollection: ...)`
    static func unit_World(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unit_World, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_left", bundle: ..., traitCollection: ...)`
    static func about_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_right", bundle: ..., traitCollection: ...)`
    static func about_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dac_2015", bundle: ..., traitCollection: ...)`
    static func dac_2015(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dac_2015, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fall_2016", bundle: ..., traitCollection: ...)`
    static func fall_2016(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fall_2016, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "frankfut_major_2015", bundle: ..., traitCollection: ...)`
    static func frankfut_major_2015(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frankfut_major_2015, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "frostivus_2017", bundle: ..., traitCollection: ...)`
    static func frostivus_2017(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frostivus_2017, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_arrow_bottom", bundle: ..., traitCollection: ...)`
    static func icon_arrow_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_arrow_more", bundle: ..., traitCollection: ...)`
    static func icon_arrow_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_back_dark", bundle: ..., traitCollection: ...)`
    static func icon_back_dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back_dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_back_light_2", bundle: ..., traitCollection: ...)`
    static func icon_back_light_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back_light_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close", bundle: ..., traitCollection: ...)`
    static func icon_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_four_rectangle", bundle: ..., traitCollection: ...)`
    static func icon_four_rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_four_rectangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_navi_cancel", bundle: ..., traitCollection: ...)`
    static func icon_navi_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navi_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_navi_info", bundle: ..., traitCollection: ...)`
    static func icon_navi_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navi_info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_navi_search", bundle: ..., traitCollection: ...)`
    static func icon_navi_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navi_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_play", bundle: ..., traitCollection: ...)`
    static func icon_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tab_home", bundle: ..., traitCollection: ...)`
    static func icon_tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tab_me", bundle: ..., traitCollection: ...)`
    static func icon_tab_me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_me, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tab_search", bundle: ..., traitCollection: ...)`
    static func icon_tab_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tab_user", bundle: ..., traitCollection: ...)`
    static func icon_tab_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tab_workshop", bundle: ..., traitCollection: ...)`
    static func icon_tab_workshop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_workshop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_three_rectangle", bundle: ..., traitCollection: ...)`
    static func icon_three_rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_three_rectangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_title_collect", bundle: ..., traitCollection: ...)`
    static func icon_title_collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_title_collect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_title_collect_grey", bundle: ..., traitCollection: ...)`
    static func icon_title_collect_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_title_collect_grey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_title_collected_grey", bundle: ..., traitCollection: ...)`
    static func icon_title_collected_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_title_collected_grey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_title_more", bundle: ..., traitCollection: ...)`
    static func icon_title_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_title_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_title_sort", bundle: ..., traitCollection: ...)`
    static func icon_title_sort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_title_sort, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_video_play", bundle: ..., traitCollection: ...)`
    static func icon_video_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_video_play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-2", bundle: ..., traitCollection: ...)`
    static func logo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_dota2", bundle: ..., traitCollection: ...)`
    static func logo_dota2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_dota2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_steam", bundle: ..., traitCollection: ...)`
    static func logo_steam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_steam, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_steam_btn", bundle: ..., traitCollection: ...)`
    static func logo_steam_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_steam_btn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_steam_light", bundle: ..., traitCollection: ...)`
    static func logo_steam_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_steam_light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_taobao", bundle: ..., traitCollection: ...)`
    static func logo_taobao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_taobao, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_bloom_2017", bundle: ..., traitCollection: ...)`
    static func new_bloom_2017(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_bloom_2017, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nexon_pc_bang", bundle: ..., traitCollection: ...)`
    static func nexon_pc_bang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nexon_pc_bang, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sort", bundle: ..., traitCollection: ...)`
    static func sort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sp_icon", bundle: ..., traitCollection: ...)`
    static func sp_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sp_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "winter_2016", bundle: ..., traitCollection: ...)`
    static func winter_2016(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.winter_2016, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "winter_2017", bundle: ..., traitCollection: ...)`
    static func winter_2017(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.winter_2017, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `BingoBarItemView`.
    static let bingoBarItemView = _R.nib._BingoBarItemView()
    /// Nib `CDTAlertCtrl`.
    static let cdtAlertCtrl = _R.nib._CDTAlertCtrl()
    
    /// `UINib(name: "BingoBarItemView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bingoBarItemView) instead")
    static func bingoBarItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bingoBarItemView)
    }
    
    /// `UINib(name: "CDTAlertCtrl", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cdtAlertCtrl) instead")
    static func cdtAlertCtrl(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cdtAlertCtrl)
    }
    
    static func bingoBarItemView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BingoBarItemView? {
      return R.nib.bingoBarItemView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BingoBarItemView
    }
    
    static func cdtAlertCtrl(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cdtAlertCtrl.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 21 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SPBundleItemCell`.
    static let spBundleItemCell: Rswift.ReuseIdentifier<SPBundleItemCell> = Rswift.ReuseIdentifier(identifier: "SPBundleItemCell")
    /// Reuse identifier `SPFilterCell`.
    static let spFilterCell: Rswift.ReuseIdentifier<SPFilterCell> = Rswift.ReuseIdentifier(identifier: "SPFilterCell")
    /// Reuse identifier `SPFilterFooter`.
    static let spFilterFooter: Rswift.ReuseIdentifier<SPFilterFooter> = Rswift.ReuseIdentifier(identifier: "SPFilterFooter")
    /// Reuse identifier `SPFilterHeader`.
    static let spFilterHeader: Rswift.ReuseIdentifier<SPFilterHeader> = Rswift.ReuseIdentifier(identifier: "SPFilterHeader")
    /// Reuse identifier `SPFilterInputCell`.
    static let spFilterInputCell: Rswift.ReuseIdentifier<SPFilterCell> = Rswift.ReuseIdentifier(identifier: "SPFilterInputCell")
    /// Reuse identifier `SPHeroCell`.
    static let spHeroCell: Rswift.ReuseIdentifier<SPHeroCell> = Rswift.ReuseIdentifier(identifier: "SPHeroCell")
    /// Reuse identifier `SPIAPCell`.
    static let spiapCell: Rswift.ReuseIdentifier<SPIAPCell> = Rswift.ReuseIdentifier(identifier: "SPIAPCell")
    /// Reuse identifier `SPItemBannerImageCell`.
    static let spItemBannerImageCell: Rswift.ReuseIdentifier<SPItemBannerImageCell> = Rswift.ReuseIdentifier(identifier: "SPItemBannerImageCell")
    /// Reuse identifier `SPItemCellLarge`.
    static let spItemCellLarge: Rswift.ReuseIdentifier<SPItemCell> = Rswift.ReuseIdentifier(identifier: "SPItemCellLarge")
    /// Reuse identifier `SPItemCellNormal`.
    static let spItemCellNormal: Rswift.ReuseIdentifier<SPItemCell> = Rswift.ReuseIdentifier(identifier: "SPItemCellNormal")
    /// Reuse identifier `SPItemEntranceCell`.
    static let spItemEntranceCell: Rswift.ReuseIdentifier<SPItemEntranceCell> = Rswift.ReuseIdentifier(identifier: "SPItemEntranceCell")
    /// Reuse identifier `SPItemPlayableCell`.
    static let spItemPlayableCell: Rswift.ReuseIdentifier<SPItemPlayableCell> = Rswift.ReuseIdentifier(identifier: "SPItemPlayableCell")
    /// Reuse identifier `SPItemSteamPriceCell`.
    static let spItemSteamPriceCell: Rswift.ReuseIdentifier<SPItemSteamPriceCell> = Rswift.ReuseIdentifier(identifier: "SPItemSteamPriceCell")
    /// Reuse identifier `SPItemTagCell`.
    static let spItemTagCell: Rswift.ReuseIdentifier<SPItemTagCell> = Rswift.ReuseIdentifier(identifier: "SPItemTagCell")
    /// Reuse identifier `SPPlayerAliaseCell`.
    static let spPlayerAliaseCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SPPlayerAliaseCell")
    /// Reuse identifier `SPPlayerCell`.
    static let spPlayerCell: Rswift.ReuseIdentifier<SPPlayerCell> = Rswift.ReuseIdentifier(identifier: "SPPlayerCell")
    /// Reuse identifier `SPPlayerDetailItemsTagCell`.
    static let spPlayerDetailItemsTagCell: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "SPPlayerDetailItemsTagCell")
    /// Reuse identifier `SPSearchCell`.
    static let spSearchCell: Rswift.ReuseIdentifier<SPSearchCell> = Rswift.ReuseIdentifier(identifier: "SPSearchCell")
    /// Reuse identifier `SPWorkshopCell`.
    static let spWorkshopCell: Rswift.ReuseIdentifier<SPWorkshopCell> = Rswift.ReuseIdentifier(identifier: "SPWorkshopCell")
    /// Reuse identifier `SPWorkshopResourceCell`.
    static let spWorkshopResourceCell: Rswift.ReuseIdentifier<SPWorkshopResourceCell> = Rswift.ReuseIdentifier(identifier: "SPWorkshopResourceCell")
    /// Reuse identifier `SPWorkshopTagCell`.
    static let spWorkshopTagCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SPWorkshopTagCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 9 view controllers.
  struct segue {
    /// This struct is generated for `DDMainADVC`, and contains static references to 1 segues.
    struct ddMainADVC {
      /// Segue identifier `MainTabBarCtrlSegueID`.
      static let mainTabBarCtrlSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DDMainADVC, DDMainTBC> = Rswift.StoryboardSegueIdentifier(identifier: "MainTabBarCtrlSegueID")
      
      /// Optionally returns a typed version of segue `MainTabBarCtrlSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func mainTabBarCtrlSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DDMainADVC, DDMainTBC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.ddMainADVC.mainTabBarCtrlSegueID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SPItemHeroPickerVC`, and contains static references to 1 segues.
    struct spItemHeroPickerVC {
      /// Segue identifier `SPHeroPickerPageVCSegueID`.
      static let spHeroPickerPageVCSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPItemHeroPickerVC, UIKit.UIPageViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SPHeroPickerPageVCSegueID")
      
      /// Optionally returns a typed version of segue `SPHeroPickerPageVCSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spHeroPickerPageVCSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPItemHeroPickerVC, UIKit.UIPageViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spItemHeroPickerVC.spHeroPickerPageVCSegueID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SPItemListVC`, and contains static references to 1 segues.
    struct spItemListVC {
      /// Segue identifier `SPItemListPageVCSegueID`.
      static let spItemListPageVCSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPItemListVC, UIKit.UIPageViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SPItemListPageVCSegueID")
      
      /// Optionally returns a typed version of segue `SPItemListPageVCSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spItemListPageVCSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPItemListVC, UIKit.UIPageViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spItemListVC.spItemListPageVCSegueID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SPItemsDetailViewCtrl`, and contains static references to 1 segues.
    struct spItemsDetailViewCtrl {
      /// Segue identifier `SPItemInfoSegueID`.
      static let spItemInfoSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPItemsDetailViewCtrl, SPItemViewCtrl> = Rswift.StoryboardSegueIdentifier(identifier: "SPItemInfoSegueID")
      
      /// Optionally returns a typed version of segue `SPItemInfoSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spItemInfoSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPItemsDetailViewCtrl, SPItemViewCtrl>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spItemsDetailViewCtrl.spItemInfoSegueID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SPPlayerDetailInfoVC`, and contains static references to 2 segues.
    struct spPlayerDetailInfoVC {
      /// Segue identifier `SPPlayerAliasesListSegueID`.
      static let spPlayerAliasesListSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPPlayerDetailInfoVC, SPPlayerAliasesVC> = Rswift.StoryboardSegueIdentifier(identifier: "SPPlayerAliasesListSegueID")
      /// Segue identifier `SPPlayerInventorySegueID`.
      static let spPlayerInventorySegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPPlayerDetailInfoVC, SPPlayerInventoryVC> = Rswift.StoryboardSegueIdentifier(identifier: "SPPlayerInventorySegueID")
      
      /// Optionally returns a typed version of segue `SPPlayerAliasesListSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spPlayerAliasesListSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPPlayerDetailInfoVC, SPPlayerAliasesVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spPlayerDetailInfoVC.spPlayerAliasesListSegueID, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `SPPlayerInventorySegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spPlayerInventorySegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPPlayerDetailInfoVC, SPPlayerInventoryVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spPlayerDetailInfoVC.spPlayerInventorySegueID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SPPlayerInventoryVC`, and contains static references to 1 segues.
    struct spPlayerInventoryVC {
      /// Segue identifier `YGInventoryPageVCSegueID`.
      static let ygInventoryPageVCSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPPlayerInventoryVC, UIKit.UIPageViewController> = Rswift.StoryboardSegueIdentifier(identifier: "YGInventoryPageVCSegueID")
      
      /// Optionally returns a typed version of segue `YGInventoryPageVCSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func ygInventoryPageVCSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPPlayerInventoryVC, UIKit.UIPageViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spPlayerInventoryVC.ygInventoryPageVCSegueID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SPPlayerListVC`, and contains static references to 2 segues.
    struct spPlayerListVC {
      /// Segue identifier `SPPlayerDetailSegueID`.
      static let spPlayerDetailSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPPlayerListVC, SPPlayerDetailInfoVC> = Rswift.StoryboardSegueIdentifier(identifier: "SPPlayerDetailSegueID")
      /// Segue identifier `SPPlayerSearchSegueID`.
      static let spPlayerSearchSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPPlayerListVC, SPSearchVC> = Rswift.StoryboardSegueIdentifier(identifier: "SPPlayerSearchSegueID")
      
      /// Optionally returns a typed version of segue `SPPlayerDetailSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spPlayerDetailSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPPlayerListVC, SPPlayerDetailInfoVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spPlayerListVC.spPlayerDetailSegueID, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `SPPlayerSearchSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spPlayerSearchSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPPlayerListVC, SPSearchVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spPlayerListVC.spPlayerSearchSegueID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SPSearchVC`, and contains static references to 1 segues.
    struct spSearchVC {
      /// Segue identifier `SPSearchPlayerDetailSegueID`.
      static let spSearchPlayerDetailSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPSearchVC, SPPlayerDetailInfoVC> = Rswift.StoryboardSegueIdentifier(identifier: "SPSearchPlayerDetailSegueID")
      
      /// Optionally returns a typed version of segue `SPSearchPlayerDetailSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spSearchPlayerDetailSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPSearchVC, SPPlayerDetailInfoVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spSearchVC.spSearchPlayerDetailSegueID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SPWorkshopVC`, and contains static references to 2 segues.
    struct spWorkshopVC {
      /// Segue identifier `SPWorkshopFilterSegueID`.
      static let spWorkshopFilterSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPWorkshopVC, SPWorkshopTagVC> = Rswift.StoryboardSegueIdentifier(identifier: "SPWorkshopFilterSegueID")
      /// Segue identifier `SPWorkshopResourcesSegueID`.
      static let spWorkshopResourcesSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SPWorkshopVC, SPWorkshopResourcesVC> = Rswift.StoryboardSegueIdentifier(identifier: "SPWorkshopResourcesSegueID")
      
      /// Optionally returns a typed version of segue `SPWorkshopFilterSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spWorkshopFilterSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPWorkshopVC, SPWorkshopTagVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spWorkshopVC.spWorkshopFilterSegueID, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `SPWorkshopResourcesSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spWorkshopResourcesSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SPWorkshopVC, SPWorkshopResourcesVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.spWorkshopVC.spWorkshopResourcesSegueID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen-SPOld`.
    static let launchScreenSPOld = _R.storyboard.launchScreenSPOld()
    /// Storyboard `SPChart`.
    static let spChart = _R.storyboard.spChart()
    /// Storyboard `SPFilter`.
    static let spFilter = _R.storyboard.spFilter()
    /// Storyboard `SPHero`.
    static let spHero = _R.storyboard.spHero()
    /// Storyboard `SPItemSearch`.
    static let spItemSearch = _R.storyboard.spItemSearch()
    /// Storyboard `SPItem`.
    static let spItem = _R.storyboard.spItem()
    /// Storyboard `SPMain`.
    static let spMain = _R.storyboard.spMain()
    /// Storyboard `SPSetting`.
    static let spSetting = _R.storyboard.spSetting()
    /// Storyboard `SPUpdate`.
    static let spUpdate = _R.storyboard.spUpdate()
    /// Storyboard `SPWorkshop`.
    static let spWorkshop = _R.storyboard.spWorkshop()
    
    /// `UIStoryboard(name: "LaunchScreen-SPOld", bundle: ...)`
    static func launchScreenSPOld(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreenSPOld)
    }
    
    /// `UIStoryboard(name: "SPChart", bundle: ...)`
    static func spChart(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spChart)
    }
    
    /// `UIStoryboard(name: "SPFilter", bundle: ...)`
    static func spFilter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spFilter)
    }
    
    /// `UIStoryboard(name: "SPHero", bundle: ...)`
    static func spHero(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spHero)
    }
    
    /// `UIStoryboard(name: "SPItem", bundle: ...)`
    static func spItem(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spItem)
    }
    
    /// `UIStoryboard(name: "SPItemSearch", bundle: ...)`
    static func spItemSearch(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spItemSearch)
    }
    
    /// `UIStoryboard(name: "SPMain", bundle: ...)`
    static func spMain(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spMain)
    }
    
    /// `UIStoryboard(name: "SPSetting", bundle: ...)`
    static func spSetting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spSetting)
    }
    
    /// `UIStoryboard(name: "SPUpdate", bundle: ...)`
    static func spUpdate(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spUpdate)
    }
    
    /// `UIStoryboard(name: "SPWorkshop", bundle: ...)`
    static func spWorkshop(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spWorkshop)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CDTAlertCtrl.validate()
    }
    
    struct _BingoBarItemView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BingoBarItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BingoBarItemView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BingoBarItemView
      }
      
      fileprivate init() {}
    }
    
    struct _CDTAlertCtrl: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CDTAlertCtrl"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_popup_warning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_popup_warning' is used in nib 'CDTAlertCtrl', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try spItemSearch.validate()
      try spMain.validate()
      try launchScreenSPOld.validate()
      try spFilter.validate()
      try spItem.validate()
      try spUpdate.validate()
      try spChart.validate()
      try spHero.validate()
      try spWorkshop.validate()
      try spSetting.validate()
    }
    
    struct launchScreenSPOld: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen-SPOld"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_tab_workshop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tab_workshop' is used in storyboard 'LaunchScreen-SPOld', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tab_home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tab_home' is used in storyboard 'LaunchScreen-SPOld', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tab_user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tab_user' is used in storyboard 'LaunchScreen-SPOld', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tab_me") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tab_me' is used in storyboard 'LaunchScreen-SPOld', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct spChart: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SPChart"
      let spPriceChartViewCtrl = StoryboardViewControllerResource<SPPriceChartViewCtrl>(identifier: "SPPriceChartViewCtrl")
      
      func spPriceChartViewCtrl(_: Void = ()) -> SPPriceChartViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spPriceChartViewCtrl)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.spChart().spPriceChartViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spPriceChartViewCtrl' could not be loaded from storyboard 'SPChart' as 'SPPriceChartViewCtrl'.") }
      }
      
      fileprivate init() {}
    }
    
    struct spFilter: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SPFilter"
      let spFilterNaviCtrl = StoryboardViewControllerResource<SPFilterNaviCtrl>(identifier: "SPFilterNaviCtrl")
      let spFilterViewCtrl = StoryboardViewControllerResource<SPFilterViewCtrl>(identifier: "SPFilterViewCtrl")
      
      func spFilterNaviCtrl(_: Void = ()) -> SPFilterNaviCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spFilterNaviCtrl)
      }
      
      func spFilterViewCtrl(_: Void = ()) -> SPFilterViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spFilterViewCtrl)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.spFilter().spFilterNaviCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spFilterNaviCtrl' could not be loaded from storyboard 'SPFilter' as 'SPFilterNaviCtrl'.") }
        if _R.storyboard.spFilter().spFilterViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spFilterViewCtrl' could not be loaded from storyboard 'SPFilter' as 'SPFilterViewCtrl'.") }
      }
      
      fileprivate init() {}
    }
    
    struct spHero: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SPHero"
      let spItemHeroListVC = StoryboardViewControllerResource<SPItemHeroListVC>(identifier: "SPItemHeroListVC")
      let spItemHeroPickerVC = StoryboardViewControllerResource<SPItemHeroPickerVC>(identifier: "SPItemHeroPickerVC")
      
      func spItemHeroListVC(_: Void = ()) -> SPItemHeroListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemHeroListVC)
      }
      
      func spItemHeroPickerVC(_: Void = ()) -> SPItemHeroPickerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemHeroPickerVC)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.spHero().spItemHeroPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemHeroPickerVC' could not be loaded from storyboard 'SPHero' as 'SPItemHeroPickerVC'.") }
        if _R.storyboard.spHero().spItemHeroListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemHeroListVC' could not be loaded from storyboard 'SPHero' as 'SPItemHeroListVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct spItem: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = YGBaseNaviCtrl
      
      let _unused0 = StoryboardViewControllerResource<YGBaseNaviCtrl>(identifier: "_unused0")
      let bundle = R.hostingBundle
      let name = "SPItem"
      let spDotaEventsViewCtrl = StoryboardViewControllerResource<SPDotaEventsViewCtrl>(identifier: "SPDotaEventsViewCtrl")
      let spItemEntranceVC = StoryboardViewControllerResource<SPItemEntranceVC>(identifier: "SPItemEntranceVC")
      let spItemListContainer = StoryboardViewControllerResource<SPItemListContainer>(identifier: "SPItemListContainer")
      let spItemListVC = StoryboardViewControllerResource<SPItemListVC>(identifier: "SPItemListVC")
      let spItemOffPriceVC = StoryboardViewControllerResource<SPItemOffPriceVC>(identifier: "SPItemOffPriceVC")
      let spItemPlayablesViewCtrl = StoryboardViewControllerResource<SPItemPlayablesViewCtrl>(identifier: "SPItemPlayablesViewCtrl")
      let spItemSteamPricesViewCtrl = StoryboardViewControllerResource<SPItemSteamPricesViewCtrl>(identifier: "SPItemSteamPricesViewCtrl")
      let spItemViewCtrl = StoryboardViewControllerResource<SPItemViewCtrl>(identifier: "SPItemViewCtrl")
      let spItemsDetailViewCtrl = StoryboardViewControllerResource<SPItemsDetailViewCtrl>(identifier: "SPItemsDetailViewCtrl")
      
      func _unused0(_: Void = ()) -> YGBaseNaviCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: _unused0)
      }
      
      func spDotaEventsViewCtrl(_: Void = ()) -> SPDotaEventsViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spDotaEventsViewCtrl)
      }
      
      func spItemEntranceVC(_: Void = ()) -> SPItemEntranceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemEntranceVC)
      }
      
      func spItemListContainer(_: Void = ()) -> SPItemListContainer? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemListContainer)
      }
      
      func spItemListVC(_: Void = ()) -> SPItemListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemListVC)
      }
      
      func spItemOffPriceVC(_: Void = ()) -> SPItemOffPriceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemOffPriceVC)
      }
      
      func spItemPlayablesViewCtrl(_: Void = ()) -> SPItemPlayablesViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemPlayablesViewCtrl)
      }
      
      func spItemSteamPricesViewCtrl(_: Void = ()) -> SPItemSteamPricesViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemSteamPricesViewCtrl)
      }
      
      func spItemViewCtrl(_: Void = ()) -> SPItemViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemViewCtrl)
      }
      
      func spItemsDetailViewCtrl(_: Void = ()) -> SPItemsDetailViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemsDetailViewCtrl)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_taobao") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_taobao' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_four_rectangle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_four_rectangle' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tab_home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tab_home' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_steam_light") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_steam_light' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_back_light_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_back_light_2' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_title_collect_grey") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_title_collect_grey' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_arrow_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow_more' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_title_collected_grey") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_title_collected_grey' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_dota2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_dota2' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_steam") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_steam' is used in storyboard 'SPItem', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.spItem().spDotaEventsViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spDotaEventsViewCtrl' could not be loaded from storyboard 'SPItem' as 'SPDotaEventsViewCtrl'.") }
        if _R.storyboard.spItem().spItemPlayablesViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemPlayablesViewCtrl' could not be loaded from storyboard 'SPItem' as 'SPItemPlayablesViewCtrl'.") }
        if _R.storyboard.spItem().spItemOffPriceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemOffPriceVC' could not be loaded from storyboard 'SPItem' as 'SPItemOffPriceVC'.") }
        if _R.storyboard.spItem().spItemListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemListVC' could not be loaded from storyboard 'SPItem' as 'SPItemListVC'.") }
        if _R.storyboard.spItem().spItemsDetailViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemsDetailViewCtrl' could not be loaded from storyboard 'SPItem' as 'SPItemsDetailViewCtrl'.") }
        if _R.storyboard.spItem().spItemViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemViewCtrl' could not be loaded from storyboard 'SPItem' as 'SPItemViewCtrl'.") }
        if _R.storyboard.spItem().spItemSteamPricesViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemSteamPricesViewCtrl' could not be loaded from storyboard 'SPItem' as 'SPItemSteamPricesViewCtrl'.") }
        if _R.storyboard.spItem().spItemEntranceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemEntranceVC' could not be loaded from storyboard 'SPItem' as 'SPItemEntranceVC'.") }
        if _R.storyboard.spItem().spItemListContainer() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemListContainer' could not be loaded from storyboard 'SPItem' as 'SPItemListContainer'.") }
        if _R.storyboard.spItem()._unused0() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier '_unused0' could not be loaded from storyboard 'SPItem' as 'YGBaseNaviCtrl'.") }
      }
      
      fileprivate init() {}
    }
    
    struct spItemSearch: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SPItemSearch"
      let spItemSearchViewCtrl = StoryboardViewControllerResource<SPItemSearchViewCtrl>(identifier: "SPItemSearchViewCtrl")
      
      func spItemSearchViewCtrl(_: Void = ()) -> SPItemSearchViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spItemSearchViewCtrl)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.spItemSearch().spItemSearchViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spItemSearchViewCtrl' could not be loaded from storyboard 'SPItemSearch' as 'SPItemSearchViewCtrl'.") }
      }
      
      fileprivate init() {}
    }
    
    struct spMain: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DDMainADVC
      
      let _unused1 = StoryboardViewControllerResource<YGBaseNaviCtrl>(identifier: "_unused1")
      let bundle = R.hostingBundle
      let ddMainADVC = StoryboardViewControllerResource<DDMainADVC>(identifier: "DDMainADVC")
      let name = "SPMain"
      let spPlayerAliasesVC = StoryboardViewControllerResource<SPPlayerAliasesVC>(identifier: "SPPlayerAliasesVC")
      let spPlayerDetailInfoVC = StoryboardViewControllerResource<SPPlayerDetailInfoVC>(identifier: "SPPlayerDetailInfoVC")
      let spPlayerInventoryVC = StoryboardViewControllerResource<SPPlayerInventoryVC>(identifier: "SPPlayerInventoryVC")
      let spPlayerListVC = StoryboardViewControllerResource<SPPlayerListVC>(identifier: "SPPlayerListVC")
      let spSearchVC = StoryboardViewControllerResource<SPSearchVC>(identifier: "SPSearchVC")
      
      func _unused1(_: Void = ()) -> YGBaseNaviCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: _unused1)
      }
      
      func ddMainADVC(_: Void = ()) -> DDMainADVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ddMainADVC)
      }
      
      func spPlayerAliasesVC(_: Void = ()) -> SPPlayerAliasesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spPlayerAliasesVC)
      }
      
      func spPlayerDetailInfoVC(_: Void = ()) -> SPPlayerDetailInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spPlayerDetailInfoVC)
      }
      
      func spPlayerInventoryVC(_: Void = ()) -> SPPlayerInventoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spPlayerInventoryVC)
      }
      
      func spPlayerListVC(_: Void = ()) -> SPPlayerListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spPlayerListVC)
      }
      
      func spSearchVC(_: Void = ()) -> SPSearchVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spSearchVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_four_rectangle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_four_rectangle' is used in storyboard 'SPMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_title_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_title_more' is used in storyboard 'SPMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tab_user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tab_user' is used in storyboard 'SPMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'SPMain', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.spMain()._unused1() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier '_unused1' could not be loaded from storyboard 'SPMain' as 'YGBaseNaviCtrl'.") }
        if _R.storyboard.spMain().spPlayerListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spPlayerListVC' could not be loaded from storyboard 'SPMain' as 'SPPlayerListVC'.") }
        if _R.storyboard.spMain().spPlayerInventoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spPlayerInventoryVC' could not be loaded from storyboard 'SPMain' as 'SPPlayerInventoryVC'.") }
        if _R.storyboard.spMain().spSearchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spSearchVC' could not be loaded from storyboard 'SPMain' as 'SPSearchVC'.") }
        if _R.storyboard.spMain().ddMainADVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ddMainADVC' could not be loaded from storyboard 'SPMain' as 'DDMainADVC'.") }
        if _R.storyboard.spMain().spPlayerAliasesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spPlayerAliasesVC' could not be loaded from storyboard 'SPMain' as 'SPPlayerAliasesVC'.") }
        if _R.storyboard.spMain().spPlayerDetailInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spPlayerDetailInfoVC' could not be loaded from storyboard 'SPMain' as 'SPPlayerDetailInfoVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct spSetting: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = YGBaseNaviCtrl
      
      let __undefine_copyright = StoryboardViewControllerResource<YGBaseViewCtrl>(identifier: "__undefine_copyright")
      let _unused3 = StoryboardViewControllerResource<YGBaseNaviCtrl>(identifier: "_unused3")
      let bundle = R.hostingBundle
      let name = "SPSetting"
      let spFeedbackViewCtrl = StoryboardViewControllerResource<SPFeedbackViewCtrl>(identifier: "SPFeedbackViewCtrl")
      let spLicenseViewCtrl = StoryboardViewControllerResource<SPLicenseViewCtrl>(identifier: "SPLicenseViewCtrl")
      let spSettingAboutVC = StoryboardViewControllerResource<SPSettingAboutVC>(identifier: "SPSettingAboutVC")
      let spSettingDiskCacheVC = StoryboardViewControllerResource<SPSettingDiskCacheVC>(identifier: "SPSettingDiskCacheVC")
      let spSettingOptionsViewCtrl = StoryboardViewControllerResource<SPSettingOptionsViewCtrl>(identifier: "SPSettingOptionsViewCtrl")
      let spSettingTableVC = StoryboardViewControllerResource<SPSettingTableVC>(identifier: "SPSettingTableVC")
      let spiapViewCtrl = StoryboardViewControllerResource<SPIAPViewCtrl>(identifier: "SPIAPViewCtrl")
      
      func __undefine_copyright(_: Void = ()) -> YGBaseViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: __undefine_copyright)
      }
      
      func _unused3(_: Void = ()) -> YGBaseNaviCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: _unused3)
      }
      
      func spFeedbackViewCtrl(_: Void = ()) -> SPFeedbackViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spFeedbackViewCtrl)
      }
      
      func spLicenseViewCtrl(_: Void = ()) -> SPLicenseViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spLicenseViewCtrl)
      }
      
      func spSettingAboutVC(_: Void = ()) -> SPSettingAboutVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spSettingAboutVC)
      }
      
      func spSettingDiskCacheVC(_: Void = ()) -> SPSettingDiskCacheVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spSettingDiskCacheVC)
      }
      
      func spSettingOptionsViewCtrl(_: Void = ()) -> SPSettingOptionsViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spSettingOptionsViewCtrl)
      }
      
      func spSettingTableVC(_: Void = ()) -> SPSettingTableVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spSettingTableVC)
      }
      
      func spiapViewCtrl(_: Void = ()) -> SPIAPViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spiapViewCtrl)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_tab_me") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tab_me' is used in storyboard 'SPSetting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "QRCode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'QRCode' is used in storyboard 'SPSetting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "about_left") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'about_left' is used in storyboard 'SPSetting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_back_light_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_back_light_2' is used in storyboard 'SPSetting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sp_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sp_icon' is used in storyboard 'SPSetting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "about_right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'about_right' is used in storyboard 'SPSetting', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.spSetting().spFeedbackViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spFeedbackViewCtrl' could not be loaded from storyboard 'SPSetting' as 'SPFeedbackViewCtrl'.") }
        if _R.storyboard.spSetting().spSettingAboutVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spSettingAboutVC' could not be loaded from storyboard 'SPSetting' as 'SPSettingAboutVC'.") }
        if _R.storyboard.spSetting()._unused3() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier '_unused3' could not be loaded from storyboard 'SPSetting' as 'YGBaseNaviCtrl'.") }
        if _R.storyboard.spSetting().spLicenseViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spLicenseViewCtrl' could not be loaded from storyboard 'SPSetting' as 'SPLicenseViewCtrl'.") }
        if _R.storyboard.spSetting().__undefine_copyright() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier '__undefine_copyright' could not be loaded from storyboard 'SPSetting' as 'YGBaseViewCtrl'.") }
        if _R.storyboard.spSetting().spSettingDiskCacheVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spSettingDiskCacheVC' could not be loaded from storyboard 'SPSetting' as 'SPSettingDiskCacheVC'.") }
        if _R.storyboard.spSetting().spiapViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spiapViewCtrl' could not be loaded from storyboard 'SPSetting' as 'SPIAPViewCtrl'.") }
        if _R.storyboard.spSetting().spSettingOptionsViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spSettingOptionsViewCtrl' could not be loaded from storyboard 'SPSetting' as 'SPSettingOptionsViewCtrl'.") }
        if _R.storyboard.spSetting().spSettingTableVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spSettingTableVC' could not be loaded from storyboard 'SPSetting' as 'SPSettingTableVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct spUpdate: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SPUpdate"
      let spUpdateViewCtrl = StoryboardViewControllerResource<SPUpdateViewCtrl>(identifier: "SPUpdateViewCtrl")
      
      func spUpdateViewCtrl(_: Void = ()) -> SPUpdateViewCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spUpdateViewCtrl)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.spUpdate().spUpdateViewCtrl() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spUpdateViewCtrl' could not be loaded from storyboard 'SPUpdate' as 'SPUpdateViewCtrl'.") }
      }
      
      fileprivate init() {}
    }
    
    struct spWorkshop: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = YGBaseNaviCtrl
      
      let _unused2 = StoryboardViewControllerResource<YGBaseNaviCtrl>(identifier: "_unused2")
      let bundle = R.hostingBundle
      let name = "SPWorkshop"
      let spFocusVisualEffectVC = StoryboardViewControllerResource<SPFocusVisualEffectVC>(identifier: "SPFocusVisualEffectVC")
      let spWorkshopResourcesVC = StoryboardViewControllerResource<SPWorkshopResourcesVC>(identifier: "SPWorkshopResourcesVC")
      let spWorkshopTagTVC = StoryboardViewControllerResource<SPWorkshopTagTVC>(identifier: "SPWorkshopTagTVC")
      let spWorkshopTagVC = StoryboardViewControllerResource<SPWorkshopTagVC>(identifier: "SPWorkshopTagVC")
      let spWorkshopVC = StoryboardViewControllerResource<SPWorkshopVC>(identifier: "SPWorkshopVC")
      
      func _unused2(_: Void = ()) -> YGBaseNaviCtrl? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: _unused2)
      }
      
      func spFocusVisualEffectVC(_: Void = ()) -> SPFocusVisualEffectVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spFocusVisualEffectVC)
      }
      
      func spWorkshopResourcesVC(_: Void = ()) -> SPWorkshopResourcesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spWorkshopResourcesVC)
      }
      
      func spWorkshopTagTVC(_: Void = ()) -> SPWorkshopTagTVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spWorkshopTagTVC)
      }
      
      func spWorkshopTagVC(_: Void = ()) -> SPWorkshopTagVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spWorkshopTagVC)
      }
      
      func spWorkshopVC(_: Void = ()) -> SPWorkshopVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spWorkshopVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_arrow_bottom") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow_bottom' is used in storyboard 'SPWorkshop', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tab_workshop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tab_workshop' is used in storyboard 'SPWorkshop', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sort") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sort' is used in storyboard 'SPWorkshop', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'SPWorkshop', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'SPWorkshop', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.spWorkshop().spWorkshopTagTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spWorkshopTagTVC' could not be loaded from storyboard 'SPWorkshop' as 'SPWorkshopTagTVC'.") }
        if _R.storyboard.spWorkshop().spWorkshopTagVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spWorkshopTagVC' could not be loaded from storyboard 'SPWorkshop' as 'SPWorkshopTagVC'.") }
        if _R.storyboard.spWorkshop().spFocusVisualEffectVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spFocusVisualEffectVC' could not be loaded from storyboard 'SPWorkshop' as 'SPFocusVisualEffectVC'.") }
        if _R.storyboard.spWorkshop()._unused2() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier '_unused2' could not be loaded from storyboard 'SPWorkshop' as 'YGBaseNaviCtrl'.") }
        if _R.storyboard.spWorkshop().spWorkshopVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spWorkshopVC' could not be loaded from storyboard 'SPWorkshop' as 'SPWorkshopVC'.") }
        if _R.storyboard.spWorkshop().spWorkshopResourcesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spWorkshopResourcesVC' could not be loaded from storyboard 'SPWorkshop' as 'SPWorkshopResourcesVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
